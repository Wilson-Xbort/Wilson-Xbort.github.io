<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>尾置返回类型</title>
    <url>/2022/06/30/Trailing-return-type/</url>
    <content><![CDATA[<h3 id="C-Primer-第五版-第六章-P221-P224">C++ Primer 第五版 第六章 P221~P224</h3>
<h4 id="函数指针P221">函数指针P221</h4>
<p><img src="/2022/06/30/Trailing-return-type/screen_img1.PNG" alt><br>
<img src="/2022/06/30/Trailing-return-type/screen_img2.PNG" alt><br>
<img src="/2022/06/30/Trailing-return-type/screen_img3.PNG" alt><br>
<img src="/2022/06/30/Trailing-return-type/screen_img4.PNG" alt><br>
<img src="/2022/06/30/Trailing-return-type/screen_img5.PNG" alt><br>
<img src="/2022/06/30/Trailing-return-type/screen_img6.PNG" alt></p>
<h4 id="代码">代码</h4>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 类型别名</span><br><span class="line">typedef string str_arr[10];</span><br><span class="line">str_arr&amp; fun();</span><br><span class="line"></span><br><span class="line">// 尾置返回类型</span><br><span class="line">auto fun()-&gt;string(&amp;)[10];</span><br><span class="line"></span><br><span class="line">// 使用decltype关键字</span><br><span class="line">string s[10];</span><br><span class="line">decltype(s)&amp; fun();</span><br></pre></td></tr></table></figure>
<p>简单的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">// print containers like vector, deque, list, etc.</span><br><span class="line">// 可以看到这里也使用了尾置返回类型，但是由于类型并非是函数类型，因此没有那么复杂</span><br><span class="line">template&lt;typename Sequence&gt;</span><br><span class="line">auto println(Sequence const&amp; seq) -&gt; std::ostream&amp;</span><br><span class="line">&#123;</span><br><span class="line">    for (auto const&amp; elem : seq) </span><br><span class="line">        std::cout &lt;&lt; elem &lt;&lt; &quot; &quot;;</span><br><span class="line">    return std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auto eliminate_duplicates(std::vector&lt;std::string&gt; &amp;vs) -&gt; std::vector&lt;std::string&gt;&amp;</span><br><span class="line">&#123;</span><br><span class="line">    std::sort(vs.begin(), vs.end());</span><br><span class="line">    println(vs);</span><br><span class="line"></span><br><span class="line">    auto new_end = std::unique(vs.begin(), vs.end());</span><br><span class="line">    println(vs);</span><br><span class="line"></span><br><span class="line">    vs.erase(new_end, vs.end());</span><br><span class="line">    return vs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;std::string&gt; vs&#123; &quot;a&quot;, &quot;v&quot;, &quot;a&quot;, &quot;s&quot;, &quot;v&quot;, &quot;a&quot;, &quot;a&quot; &#125;;</span><br><span class="line">    println(vs);</span><br><span class="line">    println(eliminate_duplicates(vs));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>性能测试工具的简单使用</title>
    <url>/2022/07/03/Use-of-performance-test-tools/</url>
    <content><![CDATA[<h2 id="下载工具：">下载工具：</h2>
<table>
<thead>
<tr>
<th><img src="/2022/07/03/Use-of-performance-test-tools/uoptt_icon1.PNG" alt="virtual User Generator"></th>
<th><img src="/2022/07/03/Use-of-performance-test-tools/uoptt_icon2.PNG" alt="controller"></th>
<th><img src="/2022/07/03/Use-of-performance-test-tools/uoptt_icon3.PNG" alt="Analysis"></th>
</tr>
</thead>
</table>
<h2 id="打开virtual-User-Generator：">打开virtual User Generator：</h2>
<ol>
<li>点击录制按钮，选择协议<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img1.png" alt><br>
2.在高级选项中选择明确包含url的脚本<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img2.png" alt><br>
3.点击开始录制后就会进入你所写的url链接，结束后就可以看到Action的代码<br>
4.可以点击<em>设计工作室</em>进行关联<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img3.png" alt><br>
5.点击运行，看到为√的时候就成功了<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img4.png" alt></li>
</ol>
<h2 id="打开controller：">打开controller：</h2>
<p>1.选择脚本<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img5.png" alt><br>
2.进行设置，在基本计划下可以设置用户数量<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img6.png" alt><br>
3.点击运行时设置，可以将自动事务的勾选去掉<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img7.png" alt><br>
4.设置全部完成后可以运行<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img8.png" alt><br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img9.png" alt><br>
5.点击结果-&gt;分析结果<br>
<img src="/2022/07/03/Use-of-performance-test-tools/uoptt_img10.png" alt><br>
将会自动打开<em>Analysis</em>显示结果</p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>basic_algorithm</title>
    <url>/2022/07/01/basic-algorithm/</url>
    <content><![CDATA[<h3 id="二分查找：">二分查找：</h3>
<p><img src="/2022/07/01/basic-algorithm/binary_search_img3.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/binary_search_img2.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/binary_search_img1.PNG" alt></p>
<h4 id="核心思路：">核心思路：</h4>
<pre><code>-&gt;middle
-&gt;求左边界和右边界之和的平均值,使用此值为下标作为比较的参数
</code></pre>
<h4 id="代码：">代码：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int search(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int left = 0, right = nums.size() - 1;</span><br><span class="line">        while(left &lt;= right)&#123;</span><br><span class="line">            int mid = (right - left) / 2 + left;</span><br><span class="line">            int num = nums[mid];</span><br><span class="line">            if (num == target) &#123;</span><br><span class="line">                return mid;</span><br><span class="line">            &#125; else if (num &gt; target) &#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="参考链接：">参考链接：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://leetcode.cn/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="双指针：">双指针：</h3>
<h4 id="核心思路：-2">核心思路：</h4>
<pre><code>-&gt;使用两个指针分别指向位置 p0 和 p1，每次比较两个指针对应的数，选择较小的那个放入答案并移动指针
-&gt;双指针也不一定非得一个指向头，一个指向尾
</code></pre>
<h4 id="例题：">例题：</h4>
<p><img src="/2022/07/01/basic-algorithm/three_algorithm.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/three_algorithm1.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/three_algorithm2.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/three_algorithm3.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/three_algorithm4.PNG" alt></p>
<h4 id="参考链接：-2">参考链接：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://leetcode.cn/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="例题2：">例题2：</h4>
<p><img src="/2022/07/01/basic-algorithm/two_pointer_1.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/two_pointer_2.PNG" alt></p>
<h4 id="参考链接：-3">参考链接：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://leetcode.cn/problems/move-zeroes/solution/yi-dong-ling-by-leetcode-solution/</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="例题2：-2">例题2：</h4>
<p><img src="/2022/07/01/basic-algorithm/two_pointer_3.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/two_pointer_4.PNG" alt></p>
<h4 id="参考链接：-4">参考链接：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/solution/liang-shu-zhi-he-ii-shu-ru-you-xu-shu-zu-by-leet-2/</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] numbers, int target) &#123;</span><br><span class="line">        int low = 0, high = numbers.length - 1;</span><br><span class="line">        while (low &lt; high) &#123;</span><br><span class="line">            int sum = numbers[low] + numbers[high];</span><br><span class="line">            if (sum == target) &#123;</span><br><span class="line">                return new int[]&#123;low + 1, high + 1&#125;;</span><br><span class="line">            &#125; else if (sum &lt; target) &#123;</span><br><span class="line">                ++low;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                --high;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return new int[]&#123;-1, -1&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="滑动窗口：">滑动窗口：</h3>
<h4 id="例题1：">例题1：</h4>
<p><img src="/2022/07/01/basic-algorithm/sliding_window_2.PNG" alt><br>
<img src="/2022/07/01/basic-algorithm/sliding_window_1.PNG" alt></p>
<h4 id="代码：-2">代码：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int lengthOfLongestSubstring(string s) &#123;</span><br><span class="line">        // 哈希集合，记录每个字符是否出现过</span><br><span class="line">        unordered_set&lt;char&gt; occ;</span><br><span class="line">        int n = s.size();</span><br><span class="line">        // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span><br><span class="line">        int rk = -1, ans = 0;</span><br><span class="line">        // 枚举左指针的位置，初始值隐性地表示为 -1</span><br><span class="line">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">            if (i != 0) &#123;</span><br><span class="line">                // 左指针向右移动一格，移除一个字符</span><br><span class="line">                occ.erase(s[i - 1]);</span><br><span class="line">            &#125;</span><br><span class="line">            while (rk + 1 &lt; n &amp;&amp; !occ.count(s[rk + 1])) &#123;</span><br><span class="line">                // 不断地移动右指针</span><br><span class="line">                occ.insert(s[rk + 1]);</span><br><span class="line">                ++rk;</span><br><span class="line">            &#125;</span><br><span class="line">            // ☆第 i 到 rk 个字符是一个极长的无重复字符子串</span><br><span class="line">            ans = max(ans, rk - i + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="例题2：-3">例题2：</h4>
<h4 id="代码：-3">代码：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool checkInclusion(string s1, string s2) &#123;</span><br><span class="line">        int n1 = s1.size(), n2 = s2.size();</span><br><span class="line">        if(n1 &gt; n2) return false;</span><br><span class="line">        vector&lt;int&gt; cnt1(26), cnt2(26);</span><br><span class="line">        for (int i = 0; i &lt; n1; ++i) &#123;</span><br><span class="line">            ++cnt1[s1[i] - &#x27;a&#x27;];</span><br><span class="line">            ++cnt2[s2[i] - &#x27;a&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">        if (cnt1 == cnt2) return true;</span><br><span class="line">        for (int i = n1; i &lt; n2; ++i) &#123;</span><br><span class="line">            ++cnt2[s2[i] - &#x27;a&#x27;];</span><br><span class="line">            // 如果之前没匹配到的话就一定没有这个字符</span><br><span class="line">            --cnt2[s2[i - n1] - &#x27;a&#x27;];</span><br><span class="line">            if (cnt1 == cnt2) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>delete duplicate elements</title>
    <url>/2022/07/10/delete-duplicate-elements/</url>
    <content><![CDATA[<h3 id="快速入手">快速入手</h3>
<h4 id="代码如下：">代码如下：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void elimdups(std::vector&lt;std::string&gt;&amp; vs)</span><br><span class="line">&#123;</span><br><span class="line">    std::sort(vs.begin(), vs.end());</span><br><span class="line">    auto new_end = std::unique(vs.begin(), vs.end());</span><br><span class="line">    // 删除重复</span><br><span class="line">    vs.erase(new_end, vs.end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="思路：先用std-sort-排序，通过std-unique-将重复元素放入容器末尾，最后擦除">思路：先用std::sort()排序，通过std::unique() 将重复元素放入容器末尾，最后擦除</h4>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>安装</title>
    <url>/2022/05/31/install/</url>
    <content><![CDATA[<h2 id="快速开始-win-下的安装）">快速开始(win 下的安装）</h2>
<h4 id="1-安装node-js-下载长期支持版本-以下为网址">1.安装node.js, 下载长期支持版本, 以下为网址:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://nodejs.cn/download/</span><br></pre></td></tr></table></figure>
<h4 id="2-安装git，以下为网址">2. 安装git，以下为网址:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://git-scm.com/downloads</span><br></pre></td></tr></table></figure>
<h4 id="3-git配置">3. git配置</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;Your email&quot;</span><br><span class="line">git config --global user.name &quot;Your name&quot;</span><br></pre></td></tr></table></figure>
<h4 id="4-创建存放文件夹-such-as-“blog”">4. 创建存放文件夹 such as “blog”</h4>
<h4 id="5-打开cmd-输入">5. 打开cmd, 输入</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<h4 id="6-进入github-创建仓库repository">6. 进入github,创建仓库repository</h4>
<h4 id="7-安装插件">7. 安装插件</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<h4 id="8-更改配置文件-config-xml">8. 更改配置文件_config.xml</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https://github.com/Githubname/Githubname.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>
<h2 id="测试">测试</h2>
<h4 id="1-运行">1.  运行</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h4 id="2-创建博客">2.  创建博客</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;My blog name&quot;</span><br></pre></td></tr></table></figure>
<h4 id="3-生成">3.  生成</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<h4 id="4-运行服务">4. 运行服务</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<h4 id="5-部署">5.部署</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h2 id="遇到deloy错误的解决方案">遇到deloy错误的解决方案</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenSSL SSL_read: Connection was reset, errno 10054 ...</span><br></pre></td></tr></table></figure>
<h4 id="1-进入站点根目录删除-deploy-git文件夹-删除git提交内容文件夹）">1. 进入站点根目录删除.deploy_git文件夹(删除git提交内容文件夹）</h4>
<h4 id="2-执行命令">2. 执行命令</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<h2 id="经验：">经验：</h2>
<h4 id="Hexo可能出现部分图片能加载成功，部分图片加载不出的情况">Hexo可能出现部分图片能加载成功，部分图片加载不出的情况</h4>
<h2 id="解决方案：">解决方案：</h2>
<h4 id="你可以看看是不是图片名称有重名，将图片名称更改至不重复的即可">你可以看看是不是图片名称有重名，将图片名称更改至不重复的即可</h4>
]]></content>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>python 每日一报</title>
    <url>/2022/06/30/python-%E6%AF%8F%E6%97%A5%E4%B8%80%E6%8A%A5/</url>
    <content><![CDATA[<h3 id="代码较简单">代码较简单</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(10)</span><br><span class="line">driver.get(&#x27;https://id.sspu.edu.cn/cas/login?service=https%3a%2f%2fhsm.sspu.edu.cn%2fselfreport%2fLoginSSO.aspx%3ftargetUrl%3d%7bbase64%7daHR0cHM6Ly9oc20uc3NwdS5lZHUuY24vc2VsZnJlcG9ydC9JbmRleC5hc3B4&#x27;)</span><br><span class="line">driver.find_element(By.ID, &quot;username&quot;).send_keys(&quot;your admin&quot;)</span><br><span class="line">driver.find_element(By.ID, &quot;password&quot;).send_keys(&quot;your password&quot;)</span><br><span class="line">driver.find_element(By.CSS_SELECTOR, &#x27;.submit_button&#x27;).click()</span><br><span class="line">driver.implicitly_wait(10)</span><br><span class="line">driver.find_element(By.XPATH, &quot;/html/body/form/div[6]/ul/li[1]/a/span&quot;).click();</span><br><span class="line"># 报送日期</span><br><span class="line">js=&quot;document.getElementById(&#x27;p1_BaoSRQ-inputEl&#x27;).removeAttribute(&#x27;readonly&#x27;)&quot;</span><br><span class="line">#js = &quot;$(&#x27;input:eq(0)&#x27;).removeAttr(&#x27;readonly&#x27;)&quot;</span><br><span class="line">driver.execute_script(js)</span><br><span class="line">input_datetime = driver.find_element(By.XPATH, &#x27;//*[@id=&quot;p1_BaoSRQ-inputEl&quot;]&#x27;)</span><br><span class="line">input_datetime.clear()</span><br><span class="line">input_datetime.send_keys(&quot;2022-06-23&quot;)</span><br><span class="line"></span><br><span class="line"># 国内</span><br><span class="line">driver.find_element(By.ID, &#x27;p1_TiWen-inputEl&#x27;).send_keys(36.6)</span><br><span class="line">driver.find_element(By.CSS_SELECTOR, &#x27;.f-btn-text&#x27;).click()</span><br><span class="line">time.sleep(1)</span><br><span class="line"># driver.find_element(By.CSS_SELECTOR, &#x27;.f-btn-text&#x27;).click()</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;PyCharm&#x27;)</span><br><span class="line"></span><br><span class="line"># See PyCharm help at https://www.jetbrains.com/help/pycharm/</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Firefox WebDriver, 安装Selenium</title>
    <url>/2022/06/23/webdriver-config/</url>
    <content><![CDATA[<h2 id="1-安装Selenium">1.安装Selenium</h2>
<h4 id="1-1-在Anaconda下">1.1 在Anaconda下</h4>
<p><img src="/2022/06/23/webdriver-config/img1.png" alt></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install selnium</span><br></pre></td></tr></table></figure>
<p>#查找Python 安装位置</p>
<p><img src="/2022/06/23/webdriver-config/img2.png" alt></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">where Python</span><br></pre></td></tr></table></figure>
<h2 id="2-下载火狐WebDriver">2.下载火狐WebDriver</h2>
<h4 id="2-1-下载">2.1 下载</h4>
<h4 id="Tips：一般下载最新版本就行">Tips：一般下载最新版本就行</h4>
<p><img src="/2022/06/23/webdriver-config/img3.png" alt><br>
网站如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/mozilla/geckodriver/releases/</span><br></pre></td></tr></table></figure>
<h4 id="2-2-解压后放在Python的安装位置">2.2 解压后放在Python的安装位置</h4>
<p><img src="/2022/06/23/webdriver-config/img4.png" alt></p>
<h4 id="2-3-在Anaconda-Jupyter下进行测试">2.3 在Anaconda Jupyter下进行测试</h4>
<p><img src="/2022/06/23/webdriver-config/img5.png" alt><br>
代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(5)</span><br><span class="line">driver.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line">time.sleep(3)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>
<h2 id="测试成功">测试成功</h2>
<p><img src="/2022/06/23/webdriver-config/img6.png" alt></p>
]]></content>
      <tags>
        <tag>安装</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串转数字</title>
    <url>/2022/07/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h3 id="如图：">如图：</h3>
<p><img src="/2022/07/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97/img1.PNG" alt></p>
<h3 id="代码-2">代码:</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vector&lt;int&gt; diffWaysToCompute(string expression) &#123;</span><br><span class="line">        vector&lt;int&gt; ops;</span><br><span class="line">        for (int i = 0; i &lt; expression.size();) &#123;</span><br><span class="line">            // 如果不是数字</span><br><span class="line">            if (!isdigit(expression[i])) &#123;</span><br><span class="line">                if (expression[i] == &#x27;+&#x27;) &#123;</span><br><span class="line">                    ops.push_back(ADDITION);</span><br><span class="line">                &#125; else if (expression[i] == &#x27;-&#x27;) &#123;</span><br><span class="line">                    ops.push_back(SUBTRACTION);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    ops.push_back(MULTIPLICATION);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                int t = 0;</span><br><span class="line">                while (i &lt; expression.size() &amp;&amp; isdigit(expression[i])) &#123;</span><br><span class="line">                    t = t * 10 + expression[i] - &#x27;0&#x27;; // 转换为数字w</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                ops.push_back(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
